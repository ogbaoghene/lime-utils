// Pseudo-elements
//
// Use ::after and ::before pseudo-elements.
//
// Parameters:
// ```scss
// $element   : `aft`, `fore`, or `both`. Defaults to `both`
// $cont      : CSS generated content
// ```
//
// Usage:
// ```scss
// .example {
//   @include lime-pseudo(fore, 'GO');
//   @include lime-pseudo(aft, 'STOP!');
//   @include lime-pseudo($cont: null) {
//     display: inline-block;
// 
//     color: red;
//     font-weight: bold;
//   }
// }
// ```
// 
// ***Note** : Escape `$cont` parameter with `null`.*
// 
// Adapted from [Team Treehouse](http://blog.teamtreehouse.com/modular-pseudo-elements-sass)
//
// Styleguide 3.5

@mixin lime-pseudo($element: both, $cont: '') {
  @if $element != both {
    @if $element == aft {
      &::after {
        content: $cont;
        
        @content;
      }
    } @else if $element == fore {
      &::before {
        content: $cont;
        
        @content;
      }
    } @else {
      @warn '`#{$element}` is not a valid option. Properties omitted.';
    }
  } @else {
    &::before,
    &::after {
      content: $cont;
      
      @content;
    }
  }
}

