// Smart Border
//
// Use a single border value on multiple sides of an element or apply individual borders in vanilla CSS's shorthand.
// 
// Parameters:
// ```scss
// $width     : border-width
// $style     : border-style. extends placeholders, dotted, dashed, solid, double, and none
// $position  : border-position. Optional
// $color     : border-color. Optional
// ```
// 
// Usage:
// ```scss
// .example {
//   @include border(5px, $style: dotted);
// }
//
// .example-2 {
//   @include border(5px, $style: solid, $position: bottom);
// }
//
// .example-3 {
//   @include border(5px, $style: dotted, $position: top left, $color: red);
// }
// ```
//
// **Requires** : _boxProperties
//
// _**Note** : Will not work within a media query._
//
// Styleguide 2.10

@mixin border($width, $style, $position: null, $color: null) {
  @if $position != null {
    @if length($position) != 1 {
      @if length($position) == 2 {
        border-#{nth($position, 1)}: $width $style $color;
        border-#{nth($position, 2)}: $width $style $color;
      }@else if length($position) == 3 {
        border-#{nth($position, 1)}: $width $style $color;
        border-#{nth($position, 2)}: $width $style $color;
        border-#{nth($position, 3)}: $width $style $color;
      } @else if length($position) == 4 {
        border-#{nth($position, 1)}: $width $style $color;
        border-#{nth($position, 2)}: $width $style $color;
        border-#{nth($position, 3)}: $width $style $color;
        border-#{nth($position, 4)}: $width $style $color;
      } @else {
        @warn 'Values are out of bounds. Properties omitted.';
      }
    } @else {
      border-#{$position}: $width $style $color;
    }
  } @else {
    @extend %border-#{$style};
    
    @if $color != null {
      border-color: $color;
      border-width: $width;
    } @else {
      border-width: $width;
    }
  }
}

