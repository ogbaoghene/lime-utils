// Flexbox
//
// Define behaviour for flexbox containers and items.
// 
// Parameters:
// ```scss
// $layout : Establish main-axis, either horizontal or vertical. Predefined as horizontal
// $alignment : Alignment along main and cross axis. Predefined as default
// $nowrap : Specify if flex items will all try to fit onto one line. Predefined as null
// $align-content: Aligns lines in a flex container when there is extra space. Predefined as null
//
// $flex: Shorthand for flex-grow, flex-shrink and flex-basis. Predefined as auto
// $order : Control order in which flex-items appear. Predefined as null
// $align-self: Override default alignment for individual flex items. Predefined as null
// ```
// 
// Usage:
// ```scss
// .example {
//   @include flexbox($layout: horizontal, $alignment: space-between stretch);
//   
//   .test-child {
//     @include flexbox-child($flex: 0 0 auto, $align-self: flex-end);
//   }
// }
//   
// .example-2 {
//   @include flexbox($layout: horizontal, $alignment: center, $nowrap: true);
// }
// ```
//
// **Requires** : _layoutProperties
//
// Styleguide 2.13

@mixin flexbox($layout: horizontal, $alignment: default, $nowrap: null, $align-content: null) {
  @extend %do-flex;
  
  @if $layout != horizontal and $nowrap != null {
    flex-flow: column nowrap;
  } @else if $layout == horizontal and $nowrap != null {
    flex-flow: row nowrap;
  } @else if $layout != horizontal and $nowrap == null {
    flex-flow: column wrap;
  } @else {
    flex-flow: row wrap;
  }

  @if $alignment {
    @if length($alignment) > 1 {
      $justify: nth($alignment, 1);
      $align: nth($alignment, 2);

      justify-content: $justify;
      align-items: $align;
    } @else if $alignment == center {
      justify-content: center;
      align-items: center;
    } @else if $alignment == end {
      justify-content: flex-end;
      align-items: flex-end;
    } @else if $alignment == start {
      justify-content: flex-start;
      align-items: flex-start;
    } @else {
      justify-content: flex-start;
      align-items: stretch;
    }
  }

  @if $align-content != null {
    align-content: $align-content;
  }
}

@mixin flexbox-child($flex: auto, $order: null, $align-self: null) {
  @if $order != null {
    order: $order;
  }

  @if length($flex) > 1 {
    @if length($flex) < 4 {
      flex: $flex;
    } @else {
      @warn 'Values are out of bounds. Properties omitted.';
    }
  } @else if type_of($flex) == number {
    flex: $flex;
  } @else {
    flex: auto;
  }

  @if $align-self != null {
    align-self: $align-self;
  }
}

