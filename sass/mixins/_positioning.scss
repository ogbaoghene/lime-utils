// Positioning
//
// Position an element position and assign it coordinates.
// 
// Parameters:
// ```scss
// $position    : Extend position placeholders, either relative, absolute, fixed, or static
// $coordinates : Top, right, bottom, and left values. Defaults to 0
// ```
// 
// Usage:
// ```scss
// .example {
//   @include positioning(absolute);
// }
//
// .example-2 {
//   @include positioning(absolute, $coordinates: 0 0);
// }
// ```
//
// **Requires** : _layoutProperties
//
// _**Note** : Escape coordinates using `null`._
//
// Styleguide 2.10

@mixin positioning($position, $coordinates: 0) {
  @extend %position-#{$position};
  
  @if length($coordinates) != 1 {
    @if length($coordinates) == 2 {
      $top: nth($coordinates, 1);
      $right: nth($coordinates, 2);
      
      @if $top != null {
        top: $top;
      }
      @if $right != null {
        #{list-map($direction, end)}: $right;
      }
    } @else if length($coordinates) == 3 {
      $top: nth($coordinates, 1);
      $right: nth($coordinates, 2);
      $bottom: nth($coordinates, 3);
      
      @if $top != null {
        top: $top;
      }
      @if $right != null {
        #{list-map($direction, end)}: $right;
      }
      @if $bottom != null {
        bottom: $bottom;
      }
    } @else if length($coordinates) == 4 {
      $top: nth($coordinates, 1);
      $right: nth($coordinates, 2);
      $bottom: nth($coordinates, 3);
      $left: nth($coordinates, 4);
      
      @if $top != null {
        top: $top;
      }
      @if $right != null {
        #{list-map($direction, end)}: $right;
      }
      @if $bottom != null {
        bottom: $bottom;
      }
      @if $left != null {
        #{list-map($direction, start)}: $left;
      }
    } @else {
      @warn 'Position coordinates are out of bounds. Properties omitted.';
    }
  } @else {
    top: $coordinates;
  }
}

