// Grid
//
// Define behaviour for grids and cells. Uses Flexbox module when supported.
//
// Parameters:
// ```scss
// $alignment : either start, opposite or center. Defaults to start
// $nested    : nested grid. Optional
// 
// $width     : cell width in percentages
// $collapsed : no cell gutter. Optional
// $align     : either top, bottom or center. Optional
// $offset    : cell offset in percentages. Optional
// 
// $no-flexbox: disable flexbox module. Optional
// ```
//
// Usage:
// ```scss
// .example {
//   @include grid($no-flexbox: true);
// 
//   &.nested {
//     @include grid($nested: true, $no-flexbox: true);
//   }
// 
//   .flexbox & {
//     @include grid();
// 
//     &.nested {
//       @include grid($nested: true);
//     }
//   }
// }
// 
// .example-cell {
//   @include cell(33.333%, $align: center, $no-flexbox: true);
  
//   &.collapsed {
//     @include cell(33.333%, $collapsed: true, $no-flexbox: true);
//   }
  
//   &.offset-20 {
//     @include cell(33.333%, $offset: 20%, $no-flexbox: true);
//   }
  
//   .flexbox & {
//     @include cell(33.333%, $align: center);
    
//     &.collapsed {
//       @include cell(33.333%, $collapsed: true);
//     }
  
//     &.offset-20 {
//       @include cell(33.333%, $offset: 20%);
//     }
//   }
// }
// ```
//
// **Requires** : _variables, _remFallback
//
// Styleguide 2.11

@mixin grid($alignment: start, $nested: null, $no-flexbox: null) {
  @if $no-flexbox != null {
    letter-spacing: -.31em; // YUI3 grid fix for safari
  
    @if $alignment != start {
      @if $alignment == center {
        text-align: center;
      } @else if $alignment == opposite {
        text-align: map-get($direction, end); // as backup
        text-align: end;
      } @else {
        @warn '`#{$alignment}` is not a valid option. Properties omitted.';
      }
    } @else {
      text-align: map-get($direction, start); // as backup
      text-align: start;
    }
  } @else {
    display: flex;
    flex-flow: row wrap;
    align-items: stretch;
    letter-spacing: normal;
    text-align: inherit;
    
    @if $alignment != start {
      @if $alignment == center {
        justify-content: center;
      } @else if $alignment == opposite {
        justify-content: flex-end;
      } @else {
        @warn '`#{$alignment}` is not a valid option. Properties omitted.';
      }
    } @else {
      justify-content: flex-start;
    }
  }
  
  @if $nested != null {
    @include rem-fallback((
      (margin-right, -$doc-gutter),
      (margin-left, -$doc-gutter),
    ));
  }
}


@mixin cell($width: auto, $align: null, $offset: null, $collapsed: null, $no-flexbox: null) {
  letter-spacing: normal;
    
  @if $no-flexbox != null {
    display: inline-block;
    width: $width;
    
    @if $align == center {
      vertical-align: middle;
    } @else if $align == bottom {
      vertical-align: bottom;
    } @else if $align == top {
      vertical-align: top;
    } @else {
      @warn '`#{$align}` is not a valid option. Properties omitted.';
    }
  } @else {
    flex: 0 1 $width;
    
    @if $width != auto { 
      max-width: $width; // IE11 box-sixing fix
    }
    
    @if $align == center {
      align-self: center;
    } @else if $align == bottom {
      align-self: flex-end;
    } @else if $align == top {
      align-self: flex-start;
    } @else {
      @warn '`#{$align}` is not a valid option. Properties omitted.';
    }
  }
  
  @if $offset != null {
    margin-#{map-get($direction, start)}: $offset;
  }
  
  @if $collapsed == null {
    @include rem-fallback((
      (padding-right, $doc-gutter),
      (padding-left, $doc-gutter),
    ));
  }
}

