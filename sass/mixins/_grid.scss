// Grid
//
// Define behaviour for grid containers and cells. Uses Flexbox module when supported.
//
// Parameters:
// ```scss
// $grid-alignment  : Define horizontal alignment of cells, either default, end or center. Defaults to default
// $nested          : Specify if grid container is nested within a grid cell. Optional
//
// $cell-width      : Width of cell
// $collapsed       : Specify if grid cell is without gutter. Optional
// $cell-alignment  : Vertical alignment of grid cell, either default, end or center. Optional 
// $cell-offset     : Cell offset. Optional 
// $cell-ordering   : Cell order, first parameter is the flexbox order property. Optional
// ```
//
// Usage:
// ```scss
// .example-nested {
//   @include grid-container($grid-layout: horizontal, $nested: true);
//
//   .example-cell {
//     @include grid-cell($cell-width: 57%, $cell-alignment: center, $cell-ordering: 2 auto 20%);
//   }
//   
//   .example-cell.is-collapsed {
//     @include grid-cell($cell-width: 33%, $collapsed: true, $cell-offset: 23%);
//   }
// }
// ```
//
// **Requires** : _variables, _listMap, _remFallback, _flexbox
//
// _**Note** : Avoid `@extend` to allow grid attributes change with media queries. Percentage values recommended for `$cell-width`, `$cell-offset`, and last 2 parameters in `$cell-ordering`._
//
// Styleguide 2.14

@mixin grid-container($grid-alignment: default, $nested: null, $no-flexbox: null) {
  letter-spacing: -.31em; // YUI3 grid fix for safari

  @if $grid-alignment != default {
    @if $grid-alignment == center {
      text-align: center;
    } @else if $grid-alignment == opposite {
      text-align: map-get($direction, end); // as backup
      text-align: end;
    } @else {
      @warn '`#{$grid-alignment}` is not a valid option. Properties omitted.';
    }
  } @else {
    text-align: map-get($direction, start); // as backup
    text-align: start;
  }
  
  @if $no-flexbox == null {
    .flexbox & {
      display: flex;
      flex-flow: row wrap;
      letter-spacing: normal;
      text-align: inherit;
      
      @if $grid-alignment != default {
        @if $grid-alignment == center {
          justify-content: center;
          align-items: stretch;
        } @else if $grid-alignment == opposite {
          justify-content: flex-end;
          align-items: stretch;
        } @else {
          @warn '`#{$grid-alignment}` is not a valid option. Properties omitted.';
        }
      } @else {
        justify-content: flex-start;
        align-items: stretch;
      }
    }
  }
  
  @if $nested != null {
    @include rem-fallback((
      (margin-right, -$doc-gutter),
      (margin-left, -$doc-gutter),
    ));
  }
}


@mixin grid-cell($cell-width: auto, $no-flexbox: null, $collapsed: null, $cell-alignment: null, $cell-offset: null, $cell-order: null) {
  display: inline-block;
  letter-spacing: normal;
  width: $cell-width;
  
  @if $collapsed == null {
    @include rem-fallback((
      (padding-right, $doc-gutter),
      (padding-left, $doc-gutter),
    ));
  }
  
  @if $cell-alignment == center {    
    vertical-align: middle;
  } @else if $cell-alignment == end {
    vertical-align: bottom;
  } @else {
    vertical-align: top;
  }
  
  @if $cell-offset != null {
    margin-#{map-get($direction, start)}: $cell-offset;
  }
  
  @if $cell-order != null {
    position: relative;

    @if length($cell-order) == 2 {
      $end: nth($cell-order, 2);
      
      #{map-get($direction, end)}: $end;
    } @else if length($cell-order) == 3 {
      $end: nth($cell-order, 2);
      $start: nth($cell-order, 3);
      
      #{map-get($direction, end)}: $end;
      #{map-get($direction, start)}: $start;
    } @else {
      @warn 'An argument of 2 or 3 values is required.';
    }
  }
  
  @if $no-flexbox == null {
    .flexbox & {
      // IE11 box-sixing fix
      @if $cell-width != auto { 
        max-width: $cell-width;
      } @else {
        max-width: none;
      }
      
      @if $cell-alignment != null {
        @if $cell-alignment == center {
          $horizontal-alignment: center;
        } @else if $cell-alignment == end {
          $horizontal-alignment: flex-end;
        } @else {
          $horizontal-alignment: flex-start;
        }
      } @else {
        $horizontal-alignment: null;
      }
      
      @if $cell-order != null {
        position: static;
        
        $cell-ordering: nth($cell-order, 1);
      } @else {
        $cell-ordering: null;
      }
      
      // Grid cells will only take up as much space as they require
      @include flexbox-child($flex: 0 1 $cell-width, $order: $cell-ordering, $align-self: $horizontal-alignment);
    }
  }
}

